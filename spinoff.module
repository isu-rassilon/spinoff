<?php

/**
 * Implements hook_menu().
 */
function spinoff_menu() {

  $items['spinoff/ajax/log/%node'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => 'node_access',
    'access arguments' => array('view', 3),
    'load arguments' => array(NULL, TRUE),
    'page callback' => 'spinoff_log_callback',
    'page arguments' => array(3),
    'delivery callback' => 'ajax_deliver',
  );

  $items['spinoff/jobcomplete/%node/%'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => 'node_access',
    'access arguments' => array('view', 2),
    'page callback' => 'spinoff_jobcomplete_callback',
    'page arguments' => array(2, 3),
  );

  return $items;

}

/**
 * Implements hook_theme().
 */
function spinoff_theme($existing, $type, $theme, $path) {
  return array(
    'spinoff_status' => array(
      'variables' => array(
        'job_complete' => FALSE,
        'job_error' => FALSE,
        'job_log' => '',
        'status_class' => '',
        'status' => '',
      ),
      'template' => 'spinoff-status',
      'path' => drupal_get_path('module', 'spinoff') . '/templates',
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function spinoff_menu_alter(&$items) {
  // Don't allow access to the node list page at /node
  $items['node']['access callback'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function spinoff_form_node_type_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type'])) {
    $form['spinoff'] = array(
      '#type' => 'fieldset',
      '#title' => t('Spinoff settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('spinoff-node-type-settings-form'),
      ),
    );
    $form['spinoff']['spinoff_script_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Script path'),
      '#description' => t('Full path to the script to run'),
      '#default_value' => variable_get('spinoff_script_path_' . $form['#node_type']->type, ''),
    );
    $form['spinoff']['spinoff_log_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Log file path'),
      '#description' => t('Include a %d placeholder for the node ID'),
      '#default_value' => variable_get('spinoff_log_path_' . $form['#node_type']->type, ''),
    );
  }
}

/**
 * Implements hook_field_info_alter().
 */
function spinoff_field_info_alter(&$info) {
  foreach ($info as $field_type => &$field_type_info) {
    $field_type_info += array('instance_settings' => array());
    $field_type_info['instance_settings'] += array(
      'spinoff_arg_name' => '',
      'spinoff_log_path' => '',
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function spinoff_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $instance = $form['#instance'];
  if ($instance['entity_type'] == 'node' && spinoff_is_spinoff_node_type($instance['bundle']) && !$form['#field']['locked']) {
    $form['instance']['settings']['spinoff'] = array(
      '#type' => 'fieldset',
      '#title' => t('Spinoff settings'),
      '#collapsible' => FALSE,
      '#tree' => TRUE,
      '#parents' => array('instance', 'settings'),
      '#weight' => 9999,
    );
    $form['instance']['settings']['spinoff']['spinoff_arg_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Command line argument name'),
      '#description' => t('Please include dashes'),
      '#default_value' => (isset($instance['settings']['spinoff_arg_name'])) ? $instance['settings']['spinoff_arg_name'] : '',
      '#required' => TRUE,
    );
  }
}

/**
 * Menu callback
 */
function spinoff_jobcomplete_callback($node, $return_code) {

  // TODO: record this in a node field

  rules_invoke_event('spinoff_jobcomplete', $node, (int) $return_code);

  drupal_exit();

}

/**
 * Callback polled by the results page that updates the displayed log
 */
function spinoff_log_callback($node) {

  list($job_complete, $job_error, $job_log) = spinoff_log($node);

  $return = array(
    '#type' => 'ajax',
    '#commands' => array(
      array(
        'command' => 'insert',
        'data' => $job_log,
        'method' => 'html',
        'selector' => '#spinoff-log',
      ),
      array(
        'command' => 'spinoff_ajax_log_event_response',
        'data' => array(
          'job_complete' => $job_complete,
          'job_error' => $job_error,
        ),
      ),
    ),
  );

  return $return;

}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function spinoff_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form_state['node']->nid) && spinoff_is_spinoff_node_type($form_state['node']->type)) {
    $form['actions']['submit']['#submit'][] = 'spinoff_node_form_submit';
  }
}

/**
 * Submit handler
 */
function spinoff_node_form_submit($form, &$form_state) {

  $node = node_load($form_state['nid']);

  $command = spinoff_build_command($node);

  exec($command);

}

function spinoff_build_command($node) {

  $script_name = variable_get('spinoff_script_path_' . $node->type, '');

  $pieces = array();

  foreach (field_info_instances('node', $node->type) as $field_name => $instance) {
    if (!empty($instance['settings']['spinoff_arg_name'])) {
      // TODO: it's not always value
      $pieces[] = array($instance['settings']['spinoff_arg_name'], escapeshellarg($node->{$field_name}[LANGUAGE_NONE][0]['value']));
    }
  }

  $arguments = implode(' ', array_map(function($piece) { return implode(' ', $piece); }, $pieces));

  $command = 'nohup ' . $script_name . ' ' . $arguments . ' > /dev/null &';

  return $command;

}


/**
 * Implements hook_preprocess_node().
 */
function spinoff_preprocess_node(&$variables) {

  $node = $variables['node'];

  if (spinoff_is_spinoff_node_type($node->type)) {

    drupal_add_library('system', 'drupal.ajax');

    drupal_add_js(drupal_get_path('module', 'spinoff') . '/js/spinoff_collapse.js');
    drupal_add_js(drupal_get_path('module', 'spinoff') . '/js/spinoff_node.js');
    drupal_add_css(drupal_get_path('module', 'spinoff') . '/css/spinoff.css');


    $status_vars = array();

    list($status_vars['job_complete'], $status_vars['job_error'], $status_vars['job_log']) = spinoff_log($node);

    if ($status_vars['job_error']) {
      $status_vars['status_class'] =  'error';
      $status_vars['status'] = 'Error';
    } elseif($status_vars['job_complete']) {
      $status_vars['status_class'] =  'status';
      $status_vars['status'] = 'Complete';
    } else {
      $status_vars['status_class'] =  'warning';
      $status_vars['status'] = 'In Progress';
    }

    $variables['content']['#prefix'] = theme('spinoff_status', $status_vars);

    if(!$status_vars['job_complete'] && !$status_vars['job_error']) {

      $base = 'spinoff-status';

      $setting = array('ajax' => array(
        $base => array(
          'selector' => '#' .  $base,
          'url' => url('spinoff/ajax/log/' . $variables['nid']),
          'event' => 'spinoffAjaxLogEvent',
          'progress' => array('type' => 'throbber'),
        ),
      ));
      drupal_add_js($setting, 'setting');
      drupal_add_js('jQuery.extend(true, Drupal.settings, {"ajax": {"' . $base . '": {"timer": setInterval(function() { jQuery("#' . $base . '").trigger("spinoffAjaxLogEvent")}, 3000)}}});', array('type' => 'inline', 'scope' => 'footer', 'weight' => 1000));

    }

  }

}

function spinoff_log($node) {

  // TODO: figure out where to get these
  $job_complete = FALSE;
  $job_error = TRUE;
  $job_log = array('Internal error occurred. Please try submitting the task again or try again later if the problem persists.');

  $log_filepath = spinoff_get_log_filepath($node);

  if (file_exists($log_filepath) && $log_file_lines = file($log_filepath)) {

    $log_file_line_count = count($log_file_lines);

    if($log_file_line_count > 10) {

      $job_log = array_slice($log_file_lines, $log_file_line_count - 10, 10);
      array_unshift($job_log, '...');

    } else {

      $job_log = $log_file_lines;

    }

  }

  return array($job_complete, $job_error, implode('<br />', $job_log));

}

function spinoff_is_spinoff_node_type($type) {
  $script_path = variable_get('spinoff_script_path_' . $type, '');
  return !empty($script_path);
}

function spinoff_get_log_filepath($node) {
  return sprintf(variable_get('spinoff_log_path_' . $node->type, '%d'), $node->nid);
}

